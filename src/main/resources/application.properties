server.port=8080

debug=true

#   显示sql日志
spring.shardingsphere.props.sql-show=true

#   配置数据源列表-常量配置
spring.shardingsphere.datasource.names=m_u,s_u,m_s_1,s_s_1,m_s_2,s_s_2

#   配置数据源
#   用户信息主库-常量配置
spring.shardingsphere.datasource.m_u.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.m_u.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m_u.jdbc-url=jdbc:mysql://mysql.ymm.com:3306/shardUser?useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.m_u.username=root
spring.shardingsphere.datasource.m_u.password=root
#   用户信息从库-常量配置
spring.shardingsphere.datasource.s_u.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.s_u.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.s_u.jdbc-url=jdbc:mysql://mysql.ymm.com:3306/shardUser?useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.s_u.username=root
spring.shardingsphere.datasource.s_u.password=root

#   配置主从-非常量配置
#   user-m-s为主从配置别名
spring.shardingsphere.rules.readwrite-splitting.data-sources.user-m-s.type=Static
spring.shardingsphere.rules.readwrite-splitting.data-sources.user-m-s.props.write-data-source-name=m_u
spring.shardingsphere.rules.readwrite-splitting.data-sources.user-m-s.props.read-data-source-names=s_u

#   主键生成策略配置-非常量配置
#   user为水平分表的逻辑表名（物理表名：user_1，user_2）
spring.shardingsphere.rules.sharding.tables.user.key-generate-strategy.column=user_id
spring.shardingsphere.rules.sharding.tables.user.key-generate-strategy.key-generator-name=snowflake

#   数据节点配置-非常量配置
#   user为逻辑表名；user-m-s为逻辑库名
spring.shardingsphere.rules.sharding.tables.user.actual-data-nodes=user-m-s.user_$->{1..2}
#   配置数据表分片逻辑列名
spring.shardingsphere.rules.sharding.tables.user.table-strategy.standard.sharding-column=user_id
#   配置分片逻辑别名
spring.shardingsphere.rules.sharding.tables.user.table-strategy.standard.sharding-algorithm-name=user-inline
#   配置分片逻辑
spring.shardingsphere.rules.sharding.sharding-algorithms.user-inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.user-inline.props.algorithm-expression=user_$->{user_id % 2 + 1}

#   配置数据源
#   业务数据主库1-常量配置
spring.shardingsphere.datasource.m_s_1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.m_s_1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m_s_1.jdbc-url=jdbc:mysql://mysql.ymm.com:3306/shardShip1?useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.m_s_1.username=root
spring.shardingsphere.datasource.m_s_1.password=root
#   业务数据从库1-常量配置
spring.shardingsphere.datasource.s_s_1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.s_s_1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.s_s_1.jdbc-url=jdbc:mysql://mysql.ymm.com:3306/shardShip1?useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.s_s_1.username=root
spring.shardingsphere.datasource.s_s_1.password=root
#   业务数据主库2-常量配置
spring.shardingsphere.datasource.m_s_2.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.m_s_2.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m_s_2.jdbc-url=jdbc:mysql://mysql.ymm.com:3306/shardShip2?useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.m_s_2.username=root
spring.shardingsphere.datasource.m_s_2.password=root
#   业务数据从库2-常量配置
spring.shardingsphere.datasource.s_s_2.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.s_s_2.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.s_s_2.jdbc-url=jdbc:mysql://mysql.ymm.com:3306/shardShip2?useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.s_s_2.username=root
spring.shardingsphere.datasource.s_s_2.password=root

#   主从配置
spring.shardingsphere.rules.readwrite-splitting.data-sources.ship-m-s-1.type=Static
spring.shardingsphere.rules.readwrite-splitting.data-sources.ship-m-s-1.props.write-data-source-name=m_s_1
spring.shardingsphere.rules.readwrite-splitting.data-sources.ship-m-s-1.props.read-data-source-names=s_s_1

spring.shardingsphere.rules.readwrite-splitting.data-sources.ship-m-s-2.type=Static
spring.shardingsphere.rules.readwrite-splitting.data-sources.ship-m-s-2.props.write-data-source-name=m_s_2
spring.shardingsphere.rules.readwrite-splitting.data-sources.ship-m-s-2.props.read-data-source-names=s_s_2

#   数据节点配置-非常量配置
#   ship、ship_equipment、ship_profile为逻辑表名；ship-m-s为逻辑库名
spring.shardingsphere.rules.sharding.tables.ships.actual-data-nodes=ship-m-s-$->{1..2}.ships_$->{1..2}
spring.shardingsphere.rules.sharding.tables.ship_equipment.actual-data-nodes=ship-m-s-$->{1..2}.ship_equipment_$->{1..2}
spring.shardingsphere.rules.sharding.tables.ship_profile.actual-data-nodes=ship-m-s-$->{1..2}.ship_profile_$->{1..2}

#   分库逻辑配置方法一-开始
#   各表分别配置
#   分库策略-配置依据列-非常量配置
spring.shardingsphere.rules.sharding.tables.ships.database-strategy.standard.sharding-column=user_id
spring.shardingsphere.rules.sharding.tables.ships.database-strategy.standard.sharding-algorithm-name=ship-database-inline

spring.shardingsphere.rules.sharding.tables.ship_equipment.database-strategy.standard.sharding-column=user_id
spring.shardingsphere.rules.sharding.tables.ship_equipment.database-strategy.standard.sharding-algorithm-name=ship_equipment-database-inline

spring.shardingsphere.rules.sharding.tables.ship_profile.database-strategy.standard.sharding-column=user_id
spring.shardingsphere.rules.sharding.tables.ship_profile.database-strategy.standard.sharding-algorithm-name=ship_profile-database-inline

#   分库策略-配置分配逻辑-非常量配置
spring.shardingsphere.rules.sharding.sharding-algorithms.ship-database-inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.ship-database-inline.props.algorithm-expression=ship-m-s-$->{user_id % 2 + 1}

spring.shardingsphere.rules.sharding.sharding-algorithms.ship_equipment-database-inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.ship_equipment-database-inline.props.algorithm-expression=ship-m-s-$->{user_id % 2 + 1}

spring.shardingsphere.rules.sharding.sharding-algorithms.ship_profile-database-inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.ship_profile-database-inline.props.algorithm-expression=ship-m-s-$->{user_id % 2 + 1}
#   分库逻辑配置方法一-结束

#   分库逻辑配置方法二-开始
#   统一配置
#spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-column=user_id
#spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-algorithm-name=db-default-inline

#spring.shardingsphere.rules.sharding.sharding-algorithms.db-default-inline.type=INLINE
#spring.shardingsphere.rules.sharding.sharding-algorithms.db-default-inline.props.algorithm-expression=ship-m-s-$->{user_id % 2 + 1}
#   分库逻辑配置方法二-结束

#   分表逻辑配置-配置依据列-非常量配置
spring.shardingsphere.rules.sharding.tables.ships.table-strategy.standard.sharding-column=ship_id
spring.shardingsphere.rules.sharding.tables.ships.table-strategy.standard..sharding-algorithm-name=ship-table-inline

spring.shardingsphere.rules.sharding.tables.ship_equipment.table-strategy.standard.sharding-column=ship_id
spring.shardingsphere.rules.sharding.tables.ship_equipment.table-strategy.standard..sharding-algorithm-name=ship_equipment-table-inline

spring.shardingsphere.rules.sharding.tables.ship_profile.table-strategy.standard.sharding-column=ship_id
spring.shardingsphere.rules.sharding.tables.ship_profile.table-strategy.standard..sharding-algorithm-name=ship_profile-table-inline

#   分表逻辑配置-配置分配逻辑-非常量配置
spring.shardingsphere.rules.sharding.sharding-algorithms.ship-table-inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.ship-table-inline.props.algorithm-expression=ships_$->{ship_id % 2 + 1}

spring.shardingsphere.rules.sharding.sharding-algorithms.ship_equipment-table-inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.ship_equipment-table-inline.props.algorithm-expression=ship_equipment_$->{ship_id % 2 + 1}

spring.shardingsphere.rules.sharding.sharding-algorithms.ship_profile-table-inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.ship_profile-table-inline.props.algorithm-expression=ship_profile_$->{ship_id % 2 + 1}

#   主键生成策略配置-非常量配置
#   ship为水平分表的逻辑表名（物理表名：ship_1，ship_2）
spring.shardingsphere.rules.sharding.tables.ships.key-generate-strategy.column=ship_id
spring.shardingsphere.rules.sharding.tables.ships.key-generate-strategy.key-generator-name=snowflake
#   ship_equipment为水平分表的逻辑表名（物理表名：ship_equipment_1，ship_equipment_2）
spring.shardingsphere.rules.sharding.tables.ship_equipment.key-generate-strategy.column=ship_equipment_id
spring.shardingsphere.rules.sharding.tables.ship_equipment.key-generate-strategy.key-generator-name=snowflake
#   ship_profile为水平分表的逻辑表名（物理表名：ship_profile_1，ship_profile_2）
spring.shardingsphere.rules.sharding.tables.ship_profile.key-generate-strategy.column=ship_profile_id
spring.shardingsphere.rules.sharding.tables.ship_profile.key-generate-strategy.key-generator-name=snowflake

#   配置绑定表规则
spring.shardingsphere.rules.sharding.binding-tables[0]=ships,ship_profile

#   配置广播表
spring.shardingsphere.rules.sharding.broadcast-tables=dictionary

#   单表配置
spring.shardingsphere.rules.sharding.tables.logs.actual-data-nodes=user-m-s.logs